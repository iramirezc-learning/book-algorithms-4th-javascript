#!/usr/bin/env node
const { Counter } = require('../js/lib')
const { Random } = require('../js/util')

/**
 * @typedef {import('../js/lib/counter/counter')} Counter
 */

/**
 * Counter test client.
 * @see pg.70,71,85,89
 * @see {@link https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Counter.java.html}
 */
class Flips {
  /**
   * Returns the counter with the max tally.
   * @param {Counter} counterX Counter X
   * @param {Counter} counterY Counter Y
   */
  static max(counterX, counterY) {
    if (counterX.tally() > counterY.tally()) {
      return counterX
    } else {
      return counterY
    }
  }

  /**
   * Simulates the flips of a coin and computes the delta.
   * @param {number} trials
   *
   * @example
   * ```sh
   * $ ./Flips 1000
   * 490 heads
   * 510 tails
   * delta: 20
   * 510 tails wins
   * ```
   */
  static run(trials) {
    const heads = new Counter('heads')
    const tails = new Counter('tails')

    for (let i = 0; i < trials; i++) {
      if (Random.bernoulli(0.5)) {
        heads.increment()
      } else {
        tails.increment()
      }
    }

    console.log(heads.toString())
    console.log(tails.toString())

    const delta = heads.tally() - tails.tally()

    console.log(`delta: ${Math.abs(delta)}`)

    if (heads.tally() === tails.tally()) {
      console.log("It's a Tie!")
    } else {
      console.log(`${Flips.max(heads, tails)} wins`)
    }
  }

  /**
   * Main execution.
   * @param {Array<string>} args Arguments form the command line.
   */
  static main(args) {
    const trials = parseInt(args[0], 10)

    this.run(trials)
  }
}

Flips.main(process.argv.slice(2))
