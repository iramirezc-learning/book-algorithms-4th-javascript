#!/usr/bin/env node
const reader = require('readline').createInterface({ input: process.stdin })
const { UnionFindWeighted } = require('../js/lib')

/**
 * Union-Find-Weighted test client.
 * @see pg.221,228
 */
class UnionFindWeightedClient {
  /**
   * Solves dynamic connectivity problem on StdIn.
   *
   * @example <caption>Tiny UF</caption>
   * ```sh
   * $ ./UnionFindWeighted < data/tinyUF.txt
   * 4 3
   * 3 8
   * 6 5
   * 9 4
   * 2 1
   * 5 0
   * 7 2
   * 6 1
   * 2 components
   * ```
   *
   * @example <caption>Medium UF</caption>
   * ```sh
   * $ ./UnionFindWeighted < data/mediumUF.txt
   * 528 503
   * 548 523
   * 389 414
   * 446 421
   * 552 553
   * ...
   * 3 components
   * ```
   *
   * @example <caption>Large UF</caption>
   * ```sh
   * $ ./UnionFindWeighted < data/largeUF.txt
   * 786321 134521
   * 696834 98245
   * 135991 549478
   * 44723 265931
   * 698410 385074
   * ...
   * 6 components
   * ```
   */
  static run() {
    let ufw

    reader
      .on('line', (line) => {
        if (!ufw) {
          // read firs line to initialize Union-Find-Weighted client
          ufw = new UnionFindWeighted(parseInt(line, 10))
        } else {
          const [p, q] = line.split(' ').map((n) => parseInt(n, 10))

          if (ufw.connected(p, q)) {
            // do nothing
          } else {
            ufw.union(p, q)
            // NOTE: logging to console is expensive
            // console.log(`${p} ${q}`)
          }
        }
      })
      .on('close', () => {
        console.log(`${ufw.count()} components`)
      })
  }

  /**
   * Main execution.
   */
  static main() {
    this.run()
  }
}

UnionFindWeightedClient.main()
